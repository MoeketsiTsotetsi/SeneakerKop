@page
@model SeneakerKop.Pages.Shop.CartModel

@{
    double totalSum = 0;
    double shipping = 0;
    double grandTotal = 0;

    if (Model != null && Model.Cart != null && Model.Cart.CartItems != null && Model.Cart.CartItems.Any())
    {
        totalSum = Model.Cart.CartItems.Sum(item => item.Price * (int)item.Quantity);
        shipping = totalSum < 1000 ? 200 : 0;
        grandTotal = totalSum + shipping;
    }
}


<div class="container mt-5">
    <div class="row">
        <div class="col-md-8">
            @if (Model != null && Model.Cart.CartItems != null && Model.Cart.CartItems.Any())
            {
                @foreach (var item in Model.Cart.CartItems)
                {
                    var ImagePath = "/images/" + item.Image;

                    <div class="card mb-4">
                        <div class="row no-gutters">
                            <div class="col-md-4 d-flex align-items-center justify-content-center">
                                <div class="image-container">
                                    <img src="@ImagePath" alt="@item.ProductName" class="card-img cart-item-image">
                                </div>
                            </div>
                            <div class="col-md-8">
                                <div class="card-body">
                                    <h5 class="card-title">@item.ProductName</h5>
                                    <p class="card-text">Price: R @item.Price</p>
                                    <div class="quantity-input">
                                        <button class="btn btn-sm btn-secondary quantity-btn" onclick="updateQuantity('@item.SneakerId', -1, @item.AvailableStock)">-</button>
                                        <input type="number" class="quantity-number" name="@item.SneakerId" value="@item.Quantity" min="1" max="@item.AvailableStock" onchange="updateQuantity('@item.SneakerId', this.value - @item.Quantity, @item.AvailableStock)" />
                                        <button class="btn btn-sm btn-secondary quantity-btn" onclick="updateQuantity('@item.SneakerId', 1, @item.AvailableStock)">+</button>
                                    </div>
                                    <p class="card-text font-weight-bold">Total: R @(item.Price * (int)item.Quantity)</p>
                                    <form method="post" asp-page-handler="RemoveItemFromCart">
                                        <input type="hidden" name="removeProductId" value="@item.SneakerId" />
                                        <button class="btn btn-danger btn-block">Remove</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="text-center">Your cart is empty.</p>
            }
        </div>
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title">Cart Summary</h5>
                    <p class="card-text cart-summary-total">Total: R @totalSum</p>
                    <p class="card-text cart-summary-shipping">Shipping: R @shipping</p>
                    <hr>
                    <p class="card-text font-weight-bold cart-summary-grand-total">Grand Total: R @grandTotal</p>
                    <form method="post" asp-page-handler="Checkout">
                        @foreach (var item in Model.Cart.CartItems)
                        {
                            <input type="hidden" name="updatedQuantities[@item.SneakerId]" value="@item.Quantity" />
                        }

                        <button type="submit" class="btn btn-primary btn-block">Checkout</button>
                    </form>

                </div>
            </div>
        </div>
    </div>
</div>


<script>
    function updateQuantity(productId, change, availableStock) {
        const quantityInput = document.querySelector(`input[name="${productId}"]`);
        let newQuantity = parseInt(quantityInput.value) + change;

        // Prevent decreasing below 1 and exceeding available stock
        if (newQuantity < 1) {
            newQuantity = 1;
        } else if (newQuantity > availableStock) {
            newQuantity = availableStock;
        }

        quantityInput.value = newQuantity;

        // Update the displayed total price for the item
        const itemPriceText = quantityInput.closest('.card-body').querySelector('.card-text').textContent;
        const itemPrice = parseFloat(itemPriceText.split('R ')[1]);
        const newTotalPrice = itemPrice * newQuantity;
        quantityInput.closest('.card-body').querySelector('.font-weight-bold').textContent = `Total: R ${newTotalPrice}`;

        // Update hidden input value for updated quantity
        const updatedQuantityInput = document.querySelector(`input[name="updatedQuantities[${productId}]"]`);
        updatedQuantityInput.value = newQuantity;

        // Update values in the cart summary
        updateCartSummary();
    }

    function updateCartSummary() {
        let newTotalSum = 0;

        // Loop through each item in the cart to calculate the new total
        const cartItems = document.querySelectorAll('.card');
        cartItems.forEach(item => {
            const quantityInput = item.querySelector('.quantity-number');
            const itemPriceText = item.querySelector('.card-text').textContent;
            const itemPrice = parseFloat(itemPriceText.split('R ')[1]);

            if (quantityInput && !isNaN(itemPrice)) {
                const newQuantity = parseInt(quantityInput.value);
                const itemTotalPrice = itemPrice * newQuantity;
                newTotalSum += itemTotalPrice;
            }
        });

        const newShipping = newTotalSum < 1000 ? 200 : 0;
        const newGrandTotal = newTotalSum + newShipping;

        // Update values in the cart summary
        const summaryTotal = document.querySelector('.cart-summary-total');
        const summaryShipping = document.querySelector('.cart-summary-shipping');
        const summaryGrandTotal = document.querySelector('.cart-summary-grand-total');

        if (summaryTotal && summaryShipping && summaryGrandTotal) {
            summaryTotal.textContent = `Total: R ${newTotalSum}`;
            summaryShipping.textContent = `Shipping: R ${newShipping}`;
            summaryGrandTotal.textContent = `Grand Total: R ${newGrandTotal}`;
        }
    }
</script>



 



<style>
    /* Custom styles */
    .cart-item-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .image-container {
        width: 150px; /* Set desired width */
        height: 150px; /* Set desired height */
        overflow: hidden;
        border-radius: 10px;
    }

    .card {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease-in-out;
    }

        .card:hover {
            transform: translateY(-5px);
        }
</style>
